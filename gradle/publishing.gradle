apply plugin: 'maven-publish'
apply plugin: 'signing'

afterEvaluate {

    def isJava = project.plugins.hasPlugin("java-library") ||
            project.plugins.hasPlugin("java")

    if (isJava) {
        task sourceJar(type: Jar) {
            from sourceSets.main.allSource
            classifier "sources"
        }
    } else {
        task sourceJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
            classifier "sources"
        }
    }

    if (project.tasks.findByName('dokkaHtml')) {
        task javadocJar(type: Jar, dependsOn: dokkaHtml) {
            classifier = 'javadoc'
            from dokkaHtml.outputDirectory
        }
    } else {
        task javadocJar(type: Jar) {
            classifier = 'javadoc'
        }
    }

    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {

                if (isJava) {
                    artifactId = project.ext.artifactId
                    groupId = rootProject.ext.groupId
                    version = rootProject.ext.version

                    artifact("$buildDir/libs/${project.ext.artifactId}.jar") {
                        builtBy jar
                    }
                } else {
                    // Applies the component for the release build variant.
                    // hack derivated 'from components.release', since we have flavors in the app,
                    // we need to explicitly get the projet's components
                    from project(":${project.name}").components.release

                    artifactId = "${project.name}"
                    groupId = rootProject.ext.groupId
                    version = rootProject.ext.version
                }

                artifact javadocJar
                if ((rootProject.ext.has("publishWithSources") && rootProject.ext.publishWithSources)
                        || (project.ext.has("publishWithSources") && project.ext.publishWithSources)) {
                    artifact sourceJar
                }

                pom {
                    name = "${project.name}"
                    description = rootProject.ext.pom.description
                    inceptionYear = rootProject.ext.pom.inceptionYear
                    url = rootProject.ext.pom.url

                    licenses {
                        license {
                            name = rootProject.ext.pom.license.name
                            url = rootProject.ext.pom.license.url
                        }
                    }

                    developers {
                        developer {
                            id = rootProject.ext.pom.developer.id
                            name = rootProject.ext.pom.developer.name
                            email = rootProject.ext.pom.developer.email
                        }
                    }

                    scm {
                        connection = rootProject.ext.pom.scm.connection
                        developerConnection = rootProject.ext.pom.scm.developerConnection
                        url = rootProject.ext.pom.scm.url
                    }
                }
            }
        }
        repositories {
            mavenLocal()

            if (null != System.env.CODEARTIFACT_DOMAIN) {
                // if new repositories needs to be added, it can be done below
                // and if for those repositories, conditions need to be applied, it can be done using if statements
                maven {
                    name "codeArtifact"
                    url "https://${System.env.CODEARTIFACT_DOMAIN}-${System.env.CODEARTIFACT_DOMAIN_OWNER_ID}.d.codeartifact.${System.env.CODEARTIFACT_REGION}.amazonaws.com/maven/${System.env.CODEARTIFACT_REPO}/"
                    credentials {
                        username "${System.env.CODEARTIFACT_AUTH_USERNAME}"
                        password "${System.env.CODEARTIFACT_AUTH_TOKEN}"
                    }
                    metadataSources {
                        mavenPom()
                        artifact()
                    }
                }
            }
            if (null != System.env.JFA_MVN_REGISTRY_URL) {
                maven {
                    name "jFrog"
                    url "${System.env.JFA_MVN_REGISTRY_URL}"
                    credentials {
                        username "${System.env.JFA_SA_USERNAME}"
                        password "${System.env.JFA_SA_PASSWD}"
                    }
                    metadataSources {
                        mavenPom()
                        artifact()
                    }
                }
            }
        }
    }

    signing {
        setRequired {
            gradle.taskGraph.allTasks.any { it instanceof PublishToMavenRepository }
        }
        sign publishing.publications.release
    }
}
